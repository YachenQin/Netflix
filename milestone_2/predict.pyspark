from math import sqrt

#read trainingfile
myfile="file:/home/training/cse427s/final_project/netflix/src/train.txt"

#generate[(item1,item2),(rating1,rating2)]
def itempair(ratings):
    rating = ratings[1]
    (item1,rating1) = rating[0]
    (item2,rating2) = rating[1]
    return((item1,item2),(rating1,rating2))

#delete same [(item1,item2),(rating1,rating2)] pairs
def filterdup(ratings):
    rating = ratings[1]
    (item1,rating1) = rating[0]
    (item2,rating2) = rating[1]
    return item1 < item2  

#compute consine similarity
def computeconsinesimilarity(itemids,ratings):
    numpairs = len(ratings)
    sum_xx=sum_yy=sum_xy=0
    if (numpairs>1):
        for ratingx, ratingy in ratings:
            sum_xx += ratingx * ratingx
            sum_yy += ratingy * ratingy
            sum_xy += ratingx * ratingy
        
    n=sum_xy
    s=0
    d=sqrt(sum_xx)*sqrt(sum_yy)
    if(d):
       s=(n/d)
       return (itemids,s)

#generate (itemid,(userid,ratings)) pairs
items = sc.textFile(myfile).map(lambda line: line.split(','))\
   .map(lambda ids: (ids[0],(ids[1],ids[2])))\
   .distinct()\
   .groupByKey()

#generate (userid,(itemid,ratings)) pairs
users = sc.textFile(myfile).map(lambda line: line.split(','))\
   .map(lambda ids: (ids[1],(ids[0],ids[2])))\
   .distinct()\
   .groupByKey()

#generate (userid,(itemid,ratings)) pairs
ratings = sc.textFile(myfile).map(lambda line: line.split(','))\
   .map(lambda ids: (int(ids[1]),(int(ids[0]),float(ids[2]))))

#generate(userid,(item1,rating1)(item2,rating2))
joinedRatings = ratings.join(ratings)

#delete (userid,(item1,rating1)(item1,rating1)) pairs
onlyjoinedratings = joinedRatings.filter(lambda x:filterdup(x))

#generate((item1,item2),(rating1,rating2)) pairs
itempairs = onlyjoinedratings.map(lambda x:itempair(x))

#generate((item1,iten2),((rating1,rating2),(rating1,rating2)...))
itempairsratings = itempairs.groupByKey().mapValues(list)

#generate((item1,item2),consin similarity)
itemsimilarities = itempairsratings.map(lambda (itemids,ratings):computeconsinesimilarity(itemids,ratings)).filter(lambda x:x)

# stripe representation
def key_mapping(line):
    (item1, item2), similarity = line
    return (item1, [(item2, similarity)])

similarity_stripe = itemsimilarities.map(lambda line: key_mapping(line)).reduceByKey(lambda a, b: a+b).collect()

similarity_dict = {}
for (key, pairs) in similarity_stripe:
    inside_pair = {}
    for (item1, item2) in pairs:
        inside_pair[item1] = item2
    similarity_dict[key] = inside_pair

#print similarity_stripe

trainfile="file:/home/training/cse427s/final_project/netflix/src/train.txt"
train_list = sc.textFile(trainfile).map(lambda line: line.split(','))\
   .map(lambda ids: (ids[1],[(ids[0],ids[2])])).reduceByKey(lambda a, b: a + b).collect()
dict = {}
for (user, pairs) in train_list:
    dict[user] = pairs

def get_watched(line):
    pred_movie = line[0]
    user = line[1]
    rate = line[2]
    sim = []
    for (item1, item2) in dict[user]:
  
        sim.append((item1, item2, similarity_dict[pred_movie][item1]))
    return (pred_movie, sim, rate)

testfile="file:/home/training/cse427s/final_project/netflix/src/test.txt"
test_watched = sc.textFile(testfile).map(lambda line: line.split(','))\
   .map(lambda ids: get_watched(ids)).take(2)

